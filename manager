package model;
import java.util.ArrayList;
import java.util.List;

public class EmployeeManager {
    private List<Employee> employees = new ArrayList<>();
    private FileHandler fh = new FileHandler();

    public List<Employee> getEmployees() {
        return employees;
    }

    public void addEmployee(Employee e) {
        employees.add(e);
    }

    public void updateEmployee(int index, Employee updated) {
        employees.set(index, updated);
    }

    public boolean isIdUnique(String id) {
        return employees.stream().noneMatch(e -> e.getId().equalsIgnoreCase(id));
    }

    public Employee searchById(String id) {
        for (Employee e : employees) {
            if (e.getId().equalsIgnoreCase(id)) {
                return e;
            }
        }
        return null;
    }

    // Sort employees by name using Merge Sort
    public void sortByName() {
        employees = mergeSortByName(employees);
    }

    private List<Employee> mergeSortByName(List<Employee> list) {
        if (list.size() <= 1) return list;

        int mid = list.size() / 2;
        List<Employee> left = mergeSortByName(new ArrayList<>(list.subList(0, mid)));
        List<Employee> right = mergeSortByName(new ArrayList<>(list.subList(mid, list.size())));

        return merge(left, right);
    }

    private List<Employee> merge(List<Employee> left, List<Employee> right) {
        List<Employee> result = new ArrayList<>();
        int i = 0, j = 0;

        while (i < left.size() && j < right.size()) {
            if (left.get(i).getName().compareToIgnoreCase(right.get(j).getName()) <= 0) {
                result.add(left.get(i++));
            } else {
                result.add(right.get(j++));
            }
        }

        while (i < left.size()) result.add(left.get(i++));
        while (j < right.size()) result.add(right.get(j++));
        return result;
    }
    
    public void saveToCSV() {
        fh.saveEmployees(employees);
        fh.savePerformanceRecords(employees);
    }

    public void loadFromCSV() {
        employees = fh.loadEmployees();
        fh.loadPerformanceRecords(employees);
    }

    public Employee searchByIdOrName(String input) {
        for (Employee e : employees) {
            if (e.getId().equalsIgnoreCase(input) || e.getName().equalsIgnoreCase(input)) {
                return e;
            }
        }
        return null;
    }

    public boolean deleteEmployeeById(String id) {
        return employees.removeIf(e -> e.getId().equalsIgnoreCase(id));
    }


}
